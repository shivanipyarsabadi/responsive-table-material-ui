{"version":3,"sources":["App.module.css","component/TableStyles.js","component/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableStyles","makeStyles","theme","root","margin","paddingBottom","thead","breakpoints","down","display","tbody","border","td","position","paddingLeft","textAlign","top","left","content","th","backgroundColor","palette","common","black","color","white","fontWeight","thr","tbr","borderBottom","try","CustTable","useState","studentData","setStudentData","useEffect","fetch","then","response","json","data","studata","slice","classes","createMuiTheme","responsiveFontSizes","className","Typography","variant","gutterBottom","align","tableResponsive","Table","table","TableHead","TableRow","TableCell","TableBody","map","row","key","id","data-title","name","username","phone","email","address","city","style","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sIACAA,EAAOC,QAAU,CAAC,IAAM,mB,6OCCXC,EAAcC,aAAW,SAACC,GAAD,MAAY,CAC9CC,KAAM,CACFC,OAAQ,QACRC,cAAe,MAEnBC,MAAM,eACDJ,EAAMK,YAAYC,KAAK,MAAQ,CAC5BC,QAAS,UAGjBC,MAAM,eACDR,EAAMK,YAAYC,KAAK,MAAQ,CAC5BC,QAAS,QACTE,OAAQ,oBAGhBC,GAAG,eACEV,EAAMK,YAAYC,KAAK,MAAQ,CAC5BC,QAAS,QACTI,SAAU,WACVC,YAAa,MACbC,UAAW,OACX,WAAY,CACRF,SAAU,WACVG,IAAK,MACLC,KAAM,OAEV,YAAa,CAAEC,QAAS,sBAIhCC,GAAG,aACCC,gBAAiBlB,EAAMmB,QAAQC,OAAOC,MACtCC,MAAOtB,EAAMmB,QAAQC,OAAOG,MAC5BC,WAAY,QACXxB,EAAMK,YAAYC,KAAK,MAAQ,CAC5BC,QAAS,uBAGjBkB,IAAI,eACCzB,EAAMK,YAAYC,KAAK,MAAQ,CAC5BK,SAAU,WACVG,IAAK,UACLC,KAAM,YAGdW,IAAI,eACC1B,EAAMK,YAAYC,KAAK,MAAQ,CAC5BC,QAAS,QACToB,aAAc,oBAGtBC,IAAK,CACDD,aAAe,kBACfd,UAAW,YCeJgB,EAjEG,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAEbC,EAFa,KAEAC,EAFA,KAKpBC,qBAAU,WACNC,MAHQ,8CAIHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACH,IAAMC,EAAUD,EAAKE,MAAM,EAAG,GAC9BR,EAAeO,QAExB,IAEH,IAAME,EAAU3C,IAEZE,EAAQ0C,cACZ1C,EAAQ2C,YAAoB3C,GAO5B,OACI,yBAAK4C,UAAWH,EAAQxC,MACpB,6BACI,kBAAC,IAAD,CAAkBD,MAAOA,GACrB,kBAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,IAVA,sDAWA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWH,EAAQb,IAAKmB,cAAY,GAV/D,UAWE,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYE,MAAM,OAAOD,cAAY,GAV3D,oCAWE,6BAASH,UAAWH,EAAQQ,iBACxB,kBAACC,EAAA,EAAD,CAAON,UAAWH,EAAQU,OACtB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUT,UAAWH,EAAQhB,KACzB,kBAAC6B,EAAA,EAAD,CAAWV,UAAWH,EAAQxB,IAA9B,gBACA,kBAACqC,EAAA,EAAD,CAAWV,UAAWH,EAAQxB,IAA9B,eACA,kBAACqC,EAAA,EAAD,CAAWV,UAAWH,EAAQxB,IAA9B,kBACA,kBAACqC,EAAA,EAAD,CAAWV,UAAWH,EAAQxB,IAA9B,cACA,kBAACqC,EAAA,EAAD,CAAWV,UAAWH,EAAQxB,IAA9B,YAGR,kBAACsC,EAAA,EAAD,CAAWX,UAAWH,EAAQjC,OACzBuB,EAAYyB,KAAI,SAAAC,GAAG,OAChB,kBAACJ,EAAA,EAAD,CAAUK,IAAKD,EAAIE,GAAIf,UAAWH,EAAQf,KAC1C,kBAAC4B,EAAA,EAAD,CAAWM,aAAW,aAAahB,UAAWH,EAAQ/B,IAAK+C,EAAII,MAC/D,kBAACP,EAAA,EAAD,CAAWM,aAAW,YAAYhB,UAAWH,EAAQ/B,IAAK+C,EAAIK,UAC9D,kBAACR,EAAA,EAAD,CAAWM,aAAW,eAAehB,UAAWH,EAAQ/B,IAAK+C,EAAIM,OACjE,kBAACT,EAAA,EAAD,CAAWM,aAAW,WAAWhB,UAAWH,EAAQ/B,IAAK+C,EAAIO,OAC7D,kBAACV,EAAA,EAAD,CAAWM,aAAW,OAAOhB,UAAWH,EAAQ/B,IAAK+C,EAAIQ,QAAQC,eAQzF,yBAAKC,MAAO,CAAEC,UAAW,OACrB,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACH,UAAWH,EAAQb,KArCjD,8CAsCR,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,YAAYE,MAAM,QArClC,oC,iBChBLqB,MARf,WACE,OACE,yBAAKzB,UAAWH,IAAQ4B,KACtB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94a60a27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__604o6\"};","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const TableStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: '5% 5%',\r\n        paddingBottom: '5%'\r\n    },\r\n    thead: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    tbody: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'block',\r\n            border: '1px solid black'\r\n        },\r\n    },\r\n    td: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'block',\r\n            position: \"relative\",\r\n            paddingLeft: \"50%\",\r\n            textAlign: \"left\",\r\n            \"&:before\": {\r\n                position: 'absolute',\r\n                top: '6px',\r\n                left: '6px',\r\n            },\r\n            \"&::before\": { content: 'attr(data-title)' }\r\n        },\r\n    },\r\n\r\n    th: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'table-header-group'\r\n        },\r\n    },\r\n    thr: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            position: 'absolute',\r\n            top: \"-9999px\",\r\n            left: \"-9999px\",\r\n        }\r\n    },\r\n    tbr: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'block',\r\n            borderBottom: '1px solid black'\r\n        },\r\n    },\r\n    try: {\r\n        borderBottom : '2px solid black',\r\n        textAlign: \"left\"\r\n    }\r\n}));","import React, { useState, useEffect } from 'react';\r\nimport { Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\nimport { createMuiTheme, responsiveFontSizes, MuiThemeProvider, Typography } from '@material-ui/core';\r\n\r\nimport { TableStyles } from './TableStyles'\r\n\r\nconst CustTable = () => {\r\n\r\n    const [studentData, setStudentData] = useState([]);\r\n    const url = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                const studata = data.slice(0, 5);\r\n                setStudentData(studata);\r\n            })\r\n    }, []);\r\n\r\n    const classes = TableStyles();\r\n\r\n    let theme = createMuiTheme();\r\n    theme = responsiveFontSizes(theme);\r\n    const heading = 'Responsive table using React hooks and Material UI';\r\n    const tryme = 'Try Me'\r\n    const label = 'Resize your browser window width';\r\n    const instalation = 'Install Material UI with the below command';\r\n    const install = 'npm install @material-ui/core';\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <Typography variant='h3' gutterBottom> {heading}</Typography >\r\n                    <Typography variant='h4' className={classes.try} gutterBottom>{tryme}</Typography>\r\n                    <Typography variant='subtitle1' align=\"left\" gutterBottom>{label}</Typography>\r\n                    <section className={classes.tableResponsive}>\r\n                        <Table className={classes.table}>\r\n                            <TableHead >\r\n                                <TableRow className={classes.thr}>\r\n                                    <TableCell className={classes.th}> First Name </TableCell>\r\n                                    <TableCell className={classes.th}> Last Name </TableCell>\r\n                                    <TableCell className={classes.th}> Phone Number </TableCell>\r\n                                    <TableCell className={classes.th}> Email Id </TableCell>\r\n                                    <TableCell className={classes.th}> City </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody className={classes.tbody}>\r\n                                {studentData.map(row => (\r\n                                    <TableRow key={row.id} className={classes.tbr}>\r\n                                    <TableCell data-title='First Name' className={classes.td}>{row.name}</TableCell>\r\n                                    <TableCell data-title='Last Name' className={classes.td}>{row.username}</TableCell>\r\n                                    <TableCell data-title='Phone Number' className={classes.td}>{row.phone}</TableCell>\r\n                                    <TableCell data-title='Email ID' className={classes.td}>{row.email}</TableCell>\r\n                                    <TableCell data-title='City' className={classes.td}>{row.address.city}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </section>\r\n                </MuiThemeProvider>\r\n            </div>\r\n            <div style={{ marginTop: '5%' }}>\r\n                <Typography variant='h4' gutterBottom className={classes.try}>{instalation}</Typography>\r\n                <Typography variant='subtitle1' align=\"left\">{install}</Typography>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustTable;","import React from 'react';\nimport CustTable from './component/Table'\nimport classes from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <CustTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}